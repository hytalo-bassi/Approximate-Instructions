#!/bin/bash

### Este script foi desenvolvido com a intenção de facilitar tarefas cotidianas
### como iniciar o docker compose ou entrar no container.
### Novas alterações e funcionalidades podem e DEVEM ser adicionadas no futuro,
### desde que essas funcionalidades e alterações sejam:
### - Funcionalidades focadas em auxiliar o processo de desenvolvimento,
###   como configurar arquivos que os desenvolvedores terão que alterar;
###   auxiliar no processo de build, compilação e testes; desenvolver
###   estatísticas e dashboards e tudo que venha facilitar o processo de trabalho
###   do desenvolvedor ou pesquisador.
###
### - Independentes de plataforma ou focadas no Docker disponível no repositório.
###   Ou seja, se uma funcionalidade estiver aqui,  ela deve funcionar
###   em todos os linux (ou a maioria) ou deve ser voltada ao Docker.
### 
### Além disso, a pasta onde este arquivo reside (`scripts/`) é destinada exclusivamente
### a códigos e scripts que automatizam as tarefas no processo de desenvolvimento deste
### projeto. Portanto, todos os arquivos dentro de `scripts/`:
### - auxiliam nas funcionalidades presentes neste script.
### - Padronizam formatos, boas práticas e estrutura de pastas e documentos.

CONTAINER_NAME="riscv-dev"
DOCKER_COMPOSE_FILE="$(pwd)/docker/compose.yaml"
SCRIPTS_FOLDER="$(pwd)/scripts"
NECESSARY_FILES="$(pwd)/rv_approx $(pwd)/scripts/patch.py $(pwd)/scripts/scripts/update_opcodes_files.py" 
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCESSO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

check_necessary_files() {
    for f in $FILES; do
        if [ ! -f "$f" ]; then
            echo "Missing required file: $f"
            exit 1
        fi
    done
}

check_container() {
    if ! docker ps | grep -q $CONTAINER_NAME; then
        print_warning "Container não está rodando. Iniciando..."
        start_container
    fi
}

start_container() {
    if docker ps -a | grep -q $CONTAINER_NAME; then
        if ! docker ps | grep -q $CONTAINER_NAME; then
            print_status "Iniciando container existente..."
            docker start $CONTAINER_NAME > /dev/null
        fi
    else
        print_status "Criando e iniciando container..."
        # Exits with Error code 1 if files does not exists
        check_necessary_files
        
        if ! docker-compose -f $DOCKER_COMPOSE_FILE up -d; then
            print_error "Não foi possível iniciar o container!"
            exit 1
        fi
    fi
    
    sleep 2
    print_success "Container $CONTAINER_NAME está rodando"
}

stop_container() {
    print_status "Parando container..."
    if ! docker-compose -f $DOCKER_COMPOSE_FILE down; then
        print_error "Não foi possível parar o container!"
        exit 1
    fi
    print_success "Container parado"
}

rebuild_container() {
    print_status "Rebuilding container..."
    if ! docker-compose -f $DOCKER_COMPOSE_FILE build; then
        print_error "Something went wrong while rebuilding!"
        exit 1
    fi
    print_success "Container rebuilt succesfully!"
}

enter_shell() {
    check_container
    print_status "Entrando no container..."
    docker exec -it $CONTAINER_NAME /bin/bash
}

show_status() {
    print_status "Status do ambiente RISC-V:"
    echo
    
    if docker ps | grep -q $CONTAINER_NAME; then
        print_success "Container está rodando"
        
        docker exec $CONTAINER_NAME bash -c "
            echo '=== Versão do GCC ==='
            riscv32-unknown-elf-gcc --version | head -1
            echo '=== Instruções customizadas ==='
            if [ -f /workspace/opcodes/opcodes-custom ]; then
                cat /workspace/opcodes/opcodes-custom
            else
                echo 'Nenhuma instrução customizada encontrada'
            fi
        " 2>/dev/null || print_warning "Erro ao obter informações do toolchain"
    else
        print_warning "Container não está rodando"
    fi
    
    if [ -d "riscv-workspace" ]; then
        echo -e "\n=== Estrutura do workspace ==="
        find riscv-workspace -type f | head -10
    fi
}

show_help() {
    echo "Script de Desenvolvimento RISC-V Rápido"

    case "$1" in
        *)
            echo
            echo "Uso: $0 {comando} [argumentos]"
            echo
            echo "Comandos disponíveis:"
            echo "  start                                 - Iniciar container"
            echo "  stop                                  - Parar container"
            echo "  shell                                 - Entrar no container"
            echo "  status                                - Ver status do ambiente"
            echo "  help                                  - Mostrar esta ajuda"
            echo "  rebuild                               - Reconstruir container"
            echo
            ;;
    esac
}

command=$1
shift

case "$command" in
    start)
        start_container
        ;;
    stop)
        stop_container
        ;;
    shell)
        enter_shell
        ;;
    status)
        show_status
        ;;
    rebuild)
        rebuild_container
        ;;
    help|--help|-h)
        show_help "$@"
        ;;
    *)
        show_help "$@"
        exit 1
        ;;
esac
